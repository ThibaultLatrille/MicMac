import numpy as np
import os

ROOT = os.path.abspath('../../..')
FOLDER = os.path.abspath('.') + "/"

configfile: 'config.yaml'

REPLICATES = [int(i) for i in np.linspace(config["min_number_loci"], config["max_number_loci"], config["nb_genes"])]
SIMULATOR_PARAMS = {k: "" for k in config["simulators"]}
SIMULATOR_PARAMS["core"] = ""
for simulator in SIMULATOR_PARAMS.keys():
    if simulator not in config:
        continue
    for param, value in config[simulator].items():
        SIMULATOR_PARAMS[simulator] += ' --{0} {1}'.format(param.lower(), value)

rule all:
    input:
        expand(FOLDER + "scatter_plot.pdf")

rule run_simulations:
    input:
        exec=ROOT + '/simulator/build/{simulator}',
        newick=ROOT + '/simulator/' + config["newick"]
    output:
        file=FOLDER + "{simulator}/replicate_{scaling}.tsv",
        nhx=FOLDER + "{simulator}/replicate_{scaling}.tsv.nhx",
    params:
        folder= lambda wildcards: FOLDER + wildcards.simulator,
        simulator= lambda wildcards: SIMULATOR_PARAMS["core"] + SIMULATOR_PARAMS[wildcards.simulator]
    shell:
        'mkdir -p {params.folder} && {input.exec} --newick {input.newick} {params.simulator} --number_loci {wildcards.scaling} --output {output.file}'

rule plot_trajectory:
    input:
        exp=FOLDER + "{simulator}/replicate_{scaling}.tsv",
        script=ROOT + '/scripts/plot_trajectory.py'
    output:
        plot=FOLDER + "{simulator}/replicate_{scaling}.pdf",
    shell:
        'python3 {input.script} --input {input.exp} --output {output.plot}'

rule plot_scatter:
    input:
        exp=expand(FOLDER + "{simulator}/replicate_{scaling}.pdf", scaling=REPLICATES, simulator=config["simulators"]),
        script=ROOT + '/scripts/plot_scatter.py'
    output:
        plot=FOLDER + "scatter_plot.pdf"
    threads: len(config["simulators"])
    shell:
        'python3 {input.script} --folder {FOLDER} --output {output.plot}'
