import os
import numpy as np

ROOT = os.path.abspath('../../..')
FOLDER = os.path.abspath('.')

configfile: 'config.yaml'

REPLICATES = [int(i) for i in np.linspace(config["min_number_loci"],config["max_number_loci"],config["nb_genes"])]
SEEDS = [int(i) for i in np.linspace(config["min_seed"],config["max_seed"],config["nb_seeds"])]
SIMULATOR_PARAMS = {s: " ".join(['--{0} {1}'.format(k,v) for k, v in d.items() if k != "model"]) for s, d in
                    config["simulators"].items()}
SIMULATOR_PARAMS["core"] = " ".join(['--{0} {1}'.format(k,v) for k, v in config["core"].items()])
output_pdf = [f"{FOLDER}/tree_stats.tsv.gz"]
if 'bayes_inference' in config and config['bayes_inference']:
    output_pdf.append(f"{FOLDER}/inference_stats.tsv.gz")

rule all:
    input: output_pdf


def simulator_output(wildcards):
    return f"{FOLDER}/{wildcards.simulator}/replicate_{wildcards.scaling}_seed{wildcards.seed}"


def variance_env(nbr_loci, a, mut_rate, pop_size, h2):
    vG = 4 * float(a) ** 2 * float(nbr_loci) * float(mut_rate) * int(pop_size)
    h2 = float(h2)
    assert vG > 0
    assert 0 <= h2 <= 1
    return vG * (1 - h2) / h2


rule run_simulations:
    input:
        exec=lambda wildcards: f"{ROOT}/simulator/build/{config['simulators'][wildcards.simulator]['model']}",
        tree=f"{ROOT}/simulator/{config['tree']}"
    output:
        nhx=f"{FOLDER}/{{simulator}}/replicate_{{scaling}}_seed{{seed}}.nhx.gz"
    params:
        file=lambda wildcards: simulator_output(wildcards),
        output_tsv=lambda wildcards: f"--output_tsv && gzip {simulator_output(wildcards)}.tsv" if OUTPUT_TSV else '',
        folder=lambda wildcards: f"{FOLDER}/{wildcards.simulator}",
        simulator=lambda wildcards: "{0} {1}".format(SIMULATOR_PARAMS["core"],SIMULATOR_PARAMS[wildcards.simulator]),
        ve=lambda wildcards: variance_env(nbr_loci=wildcards.scaling,a=config["core"]["mutation_mean_effect_size"],
            mut_rate=config["core"]["mutation_rate_per_loci_per_generation"],pop_size=config["core"]["population_size"],
            h2=config["heritability"])
    shell:
        'mkdir -p {params.folder} && {input.exec} --tree {input.tree} {params.simulator} --variance_environment {params.ve} --number_loci {wildcards.scaling} --seed {wildcards.seed} --output {params.file} && gzip {params.file}.nhx'


rule tree_stats:
    input:
        exp=expand(rules.run_simulations.output.nhx,scaling=REPLICATES,seed=SEEDS,simulator=config["simulators"]),
        script=f"{ROOT}/scripts/plot_simulations_ML.py"
    output:
        tsv=f"{FOLDER}/tree_stats.tsv.gz"
    shell:
        'python3 {input.script} --folder {FOLDER} --output {output.tsv}'


rule pre_processed_traits:
    input:
        script=f"{ROOT}/scripts/pre_processed_traits_simulations.py",
        nhx=rules.run_simulations.output.nhx,
        neutral=expand(rules.run_simulations.output.nhx,scaling=REPLICATES[0],seed=SEEDS[0],simulator='neutral')
    output:
        tree=f"{FOLDER}/{{simulator}}/replicate_{{scaling}}_seed{{seed}}.tree",
        traits=f"{FOLDER}/{{simulator}}/replicate_{{scaling}}_seed{{seed}}.traits.tsv"
    shell:
        'python3 {input.script} --input {input.nhx} --neutral {input.neutral} --tree {output.tree} --traits {output.traits}'


def chain_name(wildcards):
    return f"{FOLDER}/{wildcards.simulator}/inference_{wildcards.scaling}_seed{wildcards.seed}"


rule run_inference:
    input:
        exec=f"{ROOT}/utils/BayesCode/bin/nodetraits",
        tree=rules.pre_processed_traits.output.tree,
        traits=rules.pre_processed_traits.output.traits
    output:
        run=f"{FOLDER}/{{simulator}}/inference_{{scaling}}_seed{{seed}}.run",
    params:
        chain=lambda wildcards: chain_name(wildcards),
        until=f"-u {config['bayes_until']}"
    shell:
        '{input.exec} {params.until} --uniq_kappa --df 1 --tree {input.tree} --traitsfile {input.traits} {params.chain} && gzip -f {params.chain}.chain && gzip -f {params.chain}.trace'

rule inference_stats:
    input:
        script=f"{ROOT}/scripts/plot_simulations_bayesian.py",
        tsv=rules.tree_stats.output.tsv,
        cov=expand(rules.run_inference.output.run,scaling=REPLICATES,seed=SEEDS,simulator=config["simulators"])
    output:
        plot=f"{FOLDER}/inference_stats.tsv.gz",
    params:
        burn_in=f"--burn_in {config['bayes_burn_in']}"
    shell:
        'python3 {input.script} {params.burn_in} --tsv {input.tsv} --folder {FOLDER} --output {output.plot}'
